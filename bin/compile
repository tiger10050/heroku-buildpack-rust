#!/bin/bash

# Find all the directories we might need (based on
# heroku-buildpack-nodejs code).
BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

# Can be overriden in HerokuConfig
VERSION=stable
MAKE_FILE_PATH=""
MAKE_TASK="build-perf"
RESULTING_PACKAGE_PATH=""

# Load our configuration variables, if any were specified.
if [ -f "$BUILD_DIR/HerokuConfig" ]; then
    . "$BUILD_DIR/HerokuConfig"
fi

# Standard paranoia.
set -eu

# Check our configuration options.
if [ -z ${VERSION+x} ]; then
  >&2 echo "failed: must set VERSION in HerokuConfig to indicate the Rust version."
  exit 1
fi

# Record our Rust build environment configuration in an export file, in
# case another buildpack needs it to build Ruby gems that use Rust or
# something like that.
cat <<EOF > $BP_DIR/export
# Our rustup installation.
export RUSTUP_HOME="$CACHE_DIR/multirust"

# Our cargo installation.  We implicitly trust Rustup and Cargo
# to do the right thing when new versions are released.
export CARGO_HOME="$CACHE_DIR/cargo"

# Include binaries installed by cargo and rustup in our path.
PATH="\$CARGO_HOME/bin:\$PATH"
EOF

# Read our build environment back in and evaluate it so that we can use it.
. $BP_DIR/export

# Switch to our cache directory.
mkdir -p "$CACHE_DIR"
cd "$CACHE_DIR"

# Make sure we have an appropriate Rust toolchain installed.
if [ -d "$CARGO_HOME" ]; then
    echo "-----> Checking for new releases of Rust $VERSION channel"
    # It's possible that $VERSION has changed, or the `stable` channel has updated.
    rustup self update
    rustup update "$VERSION"
    rustup default "$VERSION"
else
    echo "-----> Downloading rustup"
    curl https://sh.rustup.rs -sSf > rustup.sh
    chmod u+x rustup.sh
    echo "-----> Using rustup to install Rust channel $VERSION"
    ./rustup.sh -y --default-toolchain "$VERSION"
    rm rustup.sh
fi
if [ ! -x "$CARGO_HOME/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at $CARGO_HOME"
  exit 1
fi

if [ ! -x "$CARGO_HOME/bin/cargo-make" ]; then
    echo "-----> Installing cargo-make"
    cargo install cargo-make
fi

export CARGO_TARGET_DIR="$CACHE_DIR/target"

# Build our project (into CARGO_TARGET_DIR so we have caching) and copy it
# back to the source tree.  In theory, we could probably just copy the
# binary or do something clever with `cargo install`, but we haven't
# figured that out yet.
#
# To debug git issues:
#export RUST_LOG="cargo::sources::git=debug"
# To debug compiler and linking issues, add `--verbose`.
echo "-----> Building application using Cargo"
cd "$BUILD_DIR"
rm -rf target/
cargo make --makefile ${MAKE_FILE_PATH} ${MAKE_TASK}
mkdir -p target/release
echo "Build dir:"
ls -l ${BUILD_DIR}
echo "Resulting path:"
ls -l ${BUILD_DIR}/${RESULTING_PACKAGE_PATH}/
cp -r ${BUILD_DIR}/${RESULTING_PACKAGE_PATH}/* target/release/
